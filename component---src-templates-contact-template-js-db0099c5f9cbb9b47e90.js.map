{"version":3,"file":"component---src-templates-contact-template-js-db0099c5f9cbb9b47e90.js","mappings":"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","sources":["webpack://gatsby-starter-glass/./node_modules/react-hook-form/dist/index.esm.mjs","webpack://gatsby-starter-glass/./node_modules/react-google-recaptcha/lib/esm/recaptcha.js","webpack://gatsby-starter-glass/./node_modules/react-async-script/lib/esm/async-script-loader.js","webpack://gatsby-starter-glass/./node_modules/react-google-recaptcha/lib/esm/recaptcha-wrapper.js","webpack://gatsby-starter-glass/./node_modules/react-netlify-forms/dist/index.modern.js","webpack://gatsby-starter-glass/./src/templates/contact-template.js"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\r\n    const result = {\r\n        defaultValues: control._defaultValues,\r\n    };\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => {\r\n            subscription && subscription.unsubscribe();\r\n        };\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _mounted = React.useRef(true);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        callback: React.useCallback((value) => _mounted.current &&\r\n            shouldSubscribeByName(_name.current, value.name, exact) &&\r\n            shouldRenderFormState(value, _localProxyFormState.current) &&\r\n            updateFormState({\r\n                ...control._formState,\r\n                ...value,\r\n            }), [control, exact]),\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, []);\r\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    const isArray = Array.isArray(names);\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (isArray) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback: React.useCallback((formState) => {\r\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n                const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n                updateValue(isUndefined(_name.current) ||\r\n                    (isObject(fieldValues) && !objectHasFunction(fieldValues))\r\n                    ? { ...fieldValues }\r\n                    : Array.isArray(fieldValues)\r\n                        ? [...fieldValues]\r\n                        : isUndefined(fieldValues)\r\n                            ? defaultValue\r\n                            : fieldValues);\r\n            }\r\n        }, [control, exact, defaultValue]),\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => control._removeUnmounted());\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\r\n                target: {\r\n                    value: getEventValue(event),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.CHANGE,\r\n            }), [name]),\r\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\r\n                target: {\r\n                    value: get(control._formValues, name),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.BLUR,\r\n            }), [name, control]),\r\n            ref: (elm) => {\r\n                const field = get(control._fields, name);\r\n                if (field && elm) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            },\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                enumerable: true,\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus) {\r\n                    _f.ref.focus();\r\n                    break;\r\n                }\r\n                else if (_f.refs && _f.refs[0].focus) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = compact(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber ||\r\n                (inputValue ? +inputValue : inputValue);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar isPlainObject = (tempObject) => {\r\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\r\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\r\n};\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        if (!Array.isArray(data) && !isPlainObject(data)) {\r\n            copy = data;\r\n        }\r\n        else {\r\n            for (const key in data) {\r\n                copy[key] = cloneObject(data[key]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (!isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) && isEmptyArray(objectRef)))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    props.rules &&\r\n        control.register(name, props.rules);\r\n    const callback = React.useCallback(({ values, name: fieldArrayName, }) => {\r\n        if (fieldArrayName === _name.current || !fieldArrayName) {\r\n            const fieldValues = get(values, _name.current, []);\r\n            setFields(fieldValues);\r\n            ids.current = fieldValues.map(generateId);\r\n        }\r\n    }, []);\r\n    useSubscribe({\r\n        callback,\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current &&\r\n            (!getValidationModes(control._options.mode).isOnSubmit ||\r\n                control._formState.isSubmitted)) {\r\n            if (control._options.resolver) {\r\n                control._executeSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError ? !error && existingError.type : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                if (field && field._f) {\r\n                    validateField(field, get(control._formValues, name), control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => key.startsWith(control._names.focus));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isHTMLElement = (value) => {\r\n    const owner = value ? value.ownerDocument : 0;\r\n    const ElementClass = owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\r\n    return value instanceof ElementClass;\r\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : value\r\n                ? +value\r\n                : value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? undefined\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    let _formState = {\r\n        submitCount: 0,\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        touchedFields: {},\r\n        dirtyFields: {},\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = cloneObject(_options.defaultValues) || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async (shouldSkipRender) => {\r\n        let isValid = false;\r\n        if (_proxyFormState.isValid) {\r\n            isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuiltInValidation(_fields, true);\r\n            if (!shouldSkipRender && isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (_proxyFormState.errors &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let isFieldDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n        if (_proxyFormState.isDirty) {\r\n            const isPreviousFormDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            isFieldDirty = isPreviousFormDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\r\n            const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n        }\r\n        if (isBlurEvent && !isPreviousFieldTouched) {\r\n            set(_formState.touchedFields, name, isBlurEvent);\r\n            output.touchedFields = _formState.touchedFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    (_proxyFormState.touchedFields &&\r\n                        isPreviousFieldTouched !== isBlurEvent);\r\n        }\r\n        isFieldDirty && shouldRender && _subjects.state.next(output);\r\n        return isFieldDirty ? output : {};\r\n    };\r\n    const shouldRenderByError = async (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating &&\r\n            !Object.values(validateFields).some((v) => v)) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => _options.resolver\r\n        ? await _options.resolver({ ..._formValues }, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation))\r\n        : {};\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const fieldError = await validateField(field, get(_formValues, _f.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\r\n                    if (fieldError[_f.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => {\r\n        const fieldValues = {\r\n            ...(_stateFlags.mount\r\n                ? _formValues\r\n                : isUndefined(defaultValue)\r\n                    ? _defaultValues\r\n                    : isString(names)\r\n                        ? { [names]: defaultValue }\r\n                        : defaultValue),\r\n        };\r\n        return generateWatchOutput(names, _names, fieldValues, isGlobal);\r\n    };\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name] ? +1 : 1;\r\n            _subjects.state.next({\r\n                isValidating: true,\r\n            });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                isValid = await _updateValid(true);\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuiltInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (info) => name(_getWatch(undefined, defaultValue), info),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            ...(field || {}),\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(!!Array.isArray(get(_defaultValues, name))\r\n                                            ? [{}]\r\n                                            : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuiltInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors)) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                if (onInvalid) {\r\n                    await onInvalid({ ..._formState.errors }, e);\r\n                }\r\n                _options.shouldFocusError &&\r\n                    focusFieldBy(_fields, (key) => get(_formState.errors, key), _names.mount);\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const _reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            try {\r\n                                if (isHTMLElement(fieldReference)) {\r\n                                    fieldReference.closest('form').reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (_a) { }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\r\n        ? formValues(_formValues)\r\n        : formValues, keepStateOptions);\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const fieldReference = field && field._f;\r\n        if (fieldReference) {\r\n            const fieldRef = fieldReference.refs\r\n                ? fieldReference.refs[0]\r\n                : fieldReference.ref;\r\n            if (fieldRef.focus) {\r\n                fieldRef.focus();\r\n                options.shouldSelect && fieldRef.select();\r\n            }\r\n        }\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        submitCount: 0,\r\n        dirtyFields: {},\r\n        touchedFields: {},\r\n        errors: {},\r\n        defaultValues: props.defaultValues,\r\n    });\r\n    if (!_formControl.current) {\r\n        _formControl.current = {\r\n            ...createFormControl(props),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    control._options = props;\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback: React.useCallback((value) => {\r\n            if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n                control._formState = {\r\n                    ...control._formState,\r\n                    ...value,\r\n                };\r\n                updateFormState({ ...control._formState });\r\n            }\r\n        }, [control]),\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    _formControl.current.formState = getProxyFormState(formState, control);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nvar ReCAPTCHA =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ReCAPTCHA, _React$Component);\n\n  function ReCAPTCHA() {\n    var _this;\n\n    _this = _React$Component.call(this) || this;\n    _this.handleExpired = _this.handleExpired.bind(_assertThisInitialized(_this));\n    _this.handleErrored = _this.handleErrored.bind(_assertThisInitialized(_this));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.handleRecaptchaRef = _this.handleRecaptchaRef.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = ReCAPTCHA.prototype;\n\n  _proto.getValue = function getValue() {\n    if (this.props.grecaptcha && this._widgetId !== undefined) {\n      return this.props.grecaptcha.getResponse(this._widgetId);\n    }\n\n    return null;\n  };\n\n  _proto.getWidgetId = function getWidgetId() {\n    if (this.props.grecaptcha && this._widgetId !== undefined) {\n      return this._widgetId;\n    }\n\n    return null;\n  };\n\n  _proto.execute = function execute() {\n    var grecaptcha = this.props.grecaptcha;\n\n    if (grecaptcha && this._widgetId !== undefined) {\n      return grecaptcha.execute(this._widgetId);\n    } else {\n      this._executeRequested = true;\n    }\n  };\n\n  _proto.executeAsync = function executeAsync() {\n    var _this2 = this;\n\n    return new Promise(function (resolve, reject) {\n      _this2.executionResolve = resolve;\n      _this2.executionReject = reject;\n\n      _this2.execute();\n    });\n  };\n\n  _proto.reset = function reset() {\n    if (this.props.grecaptcha && this._widgetId !== undefined) {\n      this.props.grecaptcha.reset(this._widgetId);\n    }\n  };\n\n  _proto.handleExpired = function handleExpired() {\n    if (this.props.onExpired) {\n      this.props.onExpired();\n    } else {\n      this.handleChange(null);\n    }\n  };\n\n  _proto.handleErrored = function handleErrored() {\n    if (this.props.onErrored) {\n      this.props.onErrored();\n    }\n\n    if (this.executionReject) {\n      this.executionReject();\n      delete this.executionResolve;\n      delete this.executionReject;\n    }\n  };\n\n  _proto.handleChange = function handleChange(token) {\n    if (this.props.onChange) {\n      this.props.onChange(token);\n    }\n\n    if (this.executionResolve) {\n      this.executionResolve(token);\n      delete this.executionReject;\n      delete this.executionResolve;\n    }\n  };\n\n  _proto.explicitRender = function explicitRender() {\n    if (this.props.grecaptcha && this.props.grecaptcha.render && this._widgetId === undefined) {\n      var wrapper = document.createElement(\"div\");\n      this._widgetId = this.props.grecaptcha.render(wrapper, {\n        sitekey: this.props.sitekey,\n        callback: this.handleChange,\n        theme: this.props.theme,\n        type: this.props.type,\n        tabindex: this.props.tabindex,\n        \"expired-callback\": this.handleExpired,\n        \"error-callback\": this.handleErrored,\n        size: this.props.size,\n        stoken: this.props.stoken,\n        hl: this.props.hl,\n        badge: this.props.badge\n      });\n      this.captcha.appendChild(wrapper);\n    }\n\n    if (this._executeRequested && this.props.grecaptcha && this._widgetId !== undefined) {\n      this._executeRequested = false;\n      this.execute();\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.explicitRender();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this.explicitRender();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this._widgetId !== undefined) {\n      this.delayOfCaptchaIframeRemoving();\n      this.reset();\n    }\n  };\n\n  _proto.delayOfCaptchaIframeRemoving = function delayOfCaptchaIframeRemoving() {\n    var temporaryNode = document.createElement(\"div\");\n    document.body.appendChild(temporaryNode);\n    temporaryNode.style.display = \"none\"; // move of the recaptcha to a temporary node\n\n    while (this.captcha.firstChild) {\n      temporaryNode.appendChild(this.captcha.firstChild);\n    } // delete the temporary node after reset will be done\n\n\n    setTimeout(function () {\n      document.body.removeChild(temporaryNode);\n    }, 5000);\n  };\n\n  _proto.handleRecaptchaRef = function handleRecaptchaRef(elem) {\n    this.captcha = elem;\n  };\n\n  _proto.render = function render() {\n    // consume properties owned by the reCATPCHA, pass the rest to the div so the user can style it.\n\n    /* eslint-disable no-unused-vars */\n    var _this$props = this.props,\n        sitekey = _this$props.sitekey,\n        onChange = _this$props.onChange,\n        theme = _this$props.theme,\n        type = _this$props.type,\n        tabindex = _this$props.tabindex,\n        onExpired = _this$props.onExpired,\n        onErrored = _this$props.onErrored,\n        size = _this$props.size,\n        stoken = _this$props.stoken,\n        grecaptcha = _this$props.grecaptcha,\n        badge = _this$props.badge,\n        hl = _this$props.hl,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"sitekey\", \"onChange\", \"theme\", \"type\", \"tabindex\", \"onExpired\", \"onErrored\", \"size\", \"stoken\", \"grecaptcha\", \"badge\", \"hl\"]);\n    /* eslint-enable no-unused-vars */\n\n\n    return React.createElement(\"div\", _extends({}, childProps, {\n      ref: this.handleRecaptchaRef\n    }));\n  };\n\n  return ReCAPTCHA;\n}(React.Component);\n\nexport { ReCAPTCHA as default };\nReCAPTCHA.displayName = \"ReCAPTCHA\";\nReCAPTCHA.propTypes = {\n  sitekey: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  grecaptcha: PropTypes.object,\n  theme: PropTypes.oneOf([\"dark\", \"light\"]),\n  type: PropTypes.oneOf([\"image\", \"audio\"]),\n  tabindex: PropTypes.number,\n  onExpired: PropTypes.func,\n  onErrored: PropTypes.func,\n  size: PropTypes.oneOf([\"compact\", \"normal\", \"invisible\"]),\n  stoken: PropTypes.string,\n  hl: PropTypes.string,\n  badge: PropTypes.oneOf([\"bottomright\", \"bottomleft\", \"inline\"])\n};\nReCAPTCHA.defaultProps = {\n  onChange: function onChange() {},\n  theme: \"light\",\n  type: \"image\",\n  tabindex: 0,\n  size: \"normal\",\n  badge: \"bottomright\"\n};","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport { Component, createElement, forwardRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport hoistStatics from \"hoist-non-react-statics\";\nvar SCRIPT_MAP = {}; // A counter used to generate a unique id for each component that uses the function\n\nvar idCount = 0;\nexport default function makeAsyncScript(getScriptURL, options) {\n  options = options || {};\n  return function wrapWithAsyncScript(WrappedComponent) {\n    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n\n    var AsyncScriptLoader =\n    /*#__PURE__*/\n    function (_Component) {\n      _inheritsLoose(AsyncScriptLoader, _Component);\n\n      function AsyncScriptLoader(props, context) {\n        var _this;\n\n        _this = _Component.call(this, props, context) || this;\n        _this.state = {};\n        _this.__scriptURL = \"\";\n        return _this;\n      }\n\n      var _proto = AsyncScriptLoader.prototype;\n\n      _proto.asyncScriptLoaderGetScriptLoaderID = function asyncScriptLoaderGetScriptLoaderID() {\n        if (!this.__scriptLoaderID) {\n          this.__scriptLoaderID = \"async-script-loader-\" + idCount++;\n        }\n\n        return this.__scriptLoaderID;\n      };\n\n      _proto.setupScriptURL = function setupScriptURL() {\n        this.__scriptURL = typeof getScriptURL === \"function\" ? getScriptURL() : getScriptURL;\n        return this.__scriptURL;\n      };\n\n      _proto.asyncScriptLoaderHandleLoad = function asyncScriptLoaderHandleLoad(state) {\n        var _this2 = this;\n\n        // use reacts setState callback to fire props.asyncScriptOnLoad with new state/entry\n        this.setState(state, function () {\n          return _this2.props.asyncScriptOnLoad && _this2.props.asyncScriptOnLoad(_this2.state);\n        });\n      };\n\n      _proto.asyncScriptLoaderTriggerOnScriptLoaded = function asyncScriptLoaderTriggerOnScriptLoaded() {\n        var mapEntry = SCRIPT_MAP[this.__scriptURL];\n\n        if (!mapEntry || !mapEntry.loaded) {\n          throw new Error(\"Script is not loaded.\");\n        }\n\n        for (var obsKey in mapEntry.observers) {\n          mapEntry.observers[obsKey](mapEntry);\n        }\n\n        delete window[options.callbackName];\n      };\n\n      _proto.componentDidMount = function componentDidMount() {\n        var _this3 = this;\n\n        var scriptURL = this.setupScriptURL();\n        var key = this.asyncScriptLoaderGetScriptLoaderID();\n        var _options = options,\n            globalName = _options.globalName,\n            callbackName = _options.callbackName,\n            scriptId = _options.scriptId; // check if global object already attached to window\n\n        if (globalName && typeof window[globalName] !== \"undefined\") {\n          SCRIPT_MAP[scriptURL] = {\n            loaded: true,\n            observers: {}\n          };\n        } // check if script loading already\n\n\n        if (SCRIPT_MAP[scriptURL]) {\n          var entry = SCRIPT_MAP[scriptURL]; // if loaded or errored then \"finish\"\n\n          if (entry && (entry.loaded || entry.errored)) {\n            this.asyncScriptLoaderHandleLoad(entry);\n            return;\n          } // if still loading then callback to observer queue\n\n\n          entry.observers[key] = function (entry) {\n            return _this3.asyncScriptLoaderHandleLoad(entry);\n          };\n\n          return;\n        }\n        /*\n         * hasn't started loading\n         * start the \"magic\"\n         * setup script to load and observers\n         */\n\n\n        var observers = {};\n\n        observers[key] = function (entry) {\n          return _this3.asyncScriptLoaderHandleLoad(entry);\n        };\n\n        SCRIPT_MAP[scriptURL] = {\n          loaded: false,\n          observers: observers\n        };\n        var script = document.createElement(\"script\");\n        script.src = scriptURL;\n        script.async = true;\n\n        for (var attribute in options.attributes) {\n          script.setAttribute(attribute, options.attributes[attribute]);\n        }\n\n        if (scriptId) {\n          script.id = scriptId;\n        }\n\n        var callObserverFuncAndRemoveObserver = function callObserverFuncAndRemoveObserver(func) {\n          if (SCRIPT_MAP[scriptURL]) {\n            var mapEntry = SCRIPT_MAP[scriptURL];\n            var observersMap = mapEntry.observers;\n\n            for (var obsKey in observersMap) {\n              if (func(observersMap[obsKey])) {\n                delete observersMap[obsKey];\n              }\n            }\n          }\n        };\n\n        if (callbackName && typeof window !== \"undefined\") {\n          window[callbackName] = function () {\n            return _this3.asyncScriptLoaderTriggerOnScriptLoaded();\n          };\n        }\n\n        script.onload = function () {\n          var mapEntry = SCRIPT_MAP[scriptURL];\n\n          if (mapEntry) {\n            mapEntry.loaded = true;\n            callObserverFuncAndRemoveObserver(function (observer) {\n              if (callbackName) {\n                return false;\n              }\n\n              observer(mapEntry);\n              return true;\n            });\n          }\n        };\n\n        script.onerror = function () {\n          var mapEntry = SCRIPT_MAP[scriptURL];\n\n          if (mapEntry) {\n            mapEntry.errored = true;\n            callObserverFuncAndRemoveObserver(function (observer) {\n              observer(mapEntry);\n              return true;\n            });\n          }\n        };\n\n        document.body.appendChild(script);\n      };\n\n      _proto.componentWillUnmount = function componentWillUnmount() {\n        // Remove tag script\n        var scriptURL = this.__scriptURL;\n\n        if (options.removeOnUnmount === true) {\n          var allScripts = document.getElementsByTagName(\"script\");\n\n          for (var i = 0; i < allScripts.length; i += 1) {\n            if (allScripts[i].src.indexOf(scriptURL) > -1) {\n              if (allScripts[i].parentNode) {\n                allScripts[i].parentNode.removeChild(allScripts[i]);\n              }\n            }\n          }\n        } // Clean the observer entry\n\n\n        var mapEntry = SCRIPT_MAP[scriptURL];\n\n        if (mapEntry) {\n          delete mapEntry.observers[this.asyncScriptLoaderGetScriptLoaderID()];\n\n          if (options.removeOnUnmount === true) {\n            delete SCRIPT_MAP[scriptURL];\n          }\n        }\n      };\n\n      _proto.render = function render() {\n        var globalName = options.globalName; // remove asyncScriptOnLoad from childProps\n\n        var _this$props = this.props,\n            asyncScriptOnLoad = _this$props.asyncScriptOnLoad,\n            forwardedRef = _this$props.forwardedRef,\n            childProps = _objectWithoutPropertiesLoose(_this$props, [\"asyncScriptOnLoad\", \"forwardedRef\"]); // eslint-disable-line no-unused-vars\n\n\n        if (globalName && typeof window !== \"undefined\") {\n          childProps[globalName] = typeof window[globalName] !== \"undefined\" ? window[globalName] : undefined;\n        }\n\n        childProps.ref = forwardedRef;\n        return createElement(WrappedComponent, childProps);\n      };\n\n      return AsyncScriptLoader;\n    }(Component); // Note the second param \"ref\" provided by React.forwardRef.\n    // We can pass it along to AsyncScriptLoader as a regular prop, e.g. \"forwardedRef\"\n    // And it can then be attached to the Component.\n\n\n    var ForwardedComponent = forwardRef(function (props, ref) {\n      return createElement(AsyncScriptLoader, _extends({}, props, {\n        forwardedRef: ref\n      }));\n    });\n    ForwardedComponent.displayName = \"AsyncScriptLoader(\" + wrappedComponentName + \")\";\n    ForwardedComponent.propTypes = {\n      asyncScriptOnLoad: PropTypes.func\n    };\n    return hoistStatics(ForwardedComponent, WrappedComponent);\n  };\n}","import ReCAPTCHA from \"./recaptcha\";\nimport makeAsyncScriptLoader from \"react-async-script\";\nvar callbackName = \"onloadcallback\";\nvar globalName = \"grecaptcha\";\n\nfunction getOptions() {\n  return typeof window !== \"undefined\" && window.recaptchaOptions || {};\n}\n\nfunction getURL() {\n  var dynamicOptions = getOptions();\n  var hostname = dynamicOptions.useRecaptchaNet ? \"recaptcha.net\" : \"www.google.com\";\n  return \"https://\" + hostname + \"/recaptcha/api.js?onload=\" + callbackName + \"&render=explicit\";\n}\n\nexport default makeAsyncScriptLoader(getURL, {\n  callbackName: callbackName,\n  globalName: globalName\n})(ReCAPTCHA);","import React from 'react';\nimport GoogleRecaptcha from 'react-google-recaptcha';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"children\"];\nvar NetlifyFormContext = React.createContext();\nNetlifyFormContext.displayName = 'NetlifyFormContext';\nvar NetlifyFormProvider = function NetlifyFormProvider(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(NetlifyFormContext.Provider, {\n    value: _extends({}, props)\n  }, children);\n};\nfunction useNetlifyFormContext() {\n  return React.useContext(NetlifyFormContext);\n}\n\nvar _excluded$1 = [\"label\"];\nvar Honeypot = function Honeypot(_ref) {\n  var _ref$label = _ref.label,\n      label = _ref$label === void 0 ? \"Leave the following field empty:\" : _ref$label,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n  var _useNetlifyFormContex = useNetlifyFormContext(),\n      handleChange = _useNetlifyFormContex.handleChange,\n      honeypotName = _useNetlifyFormContex.honeypotName;\n\n  return /*#__PURE__*/React.createElement(\"p\", {\n    hidden: true\n  }, /*#__PURE__*/React.createElement(\"label\", null, label, ' ', /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"text\"\n  }, props, {\n    name: honeypotName,\n    onChange: handleChange\n  }))));\n};\n\nvar encodeFormData = function encodeFormData(data) {\n  var formData = new FormData();\n\n  for (var _i = 0, _Object$keys = Object.keys(data); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    formData.append(key, data[key]);\n  }\n\n  return formData;\n};\nvar isFunction = function isFunction(x) {\n  return typeof x === 'function';\n};\nvar isEmptyChildren = function isEmptyChildren(x) {\n  return React.Children.count(x) === 0;\n};\n\nfunction NetlifyFormReducer (state, action) {\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case 'CHANGE_FORM_DATA':\n      {\n        var _extends2;\n\n        var name = payload.name,\n            value = payload.value,\n            _type = payload.type;\n        return _extends({}, state, {\n          values: _extends({}, state.values, (_extends2 = {}, _extends2[name] = _type !== 'checkbox' ? value : payload.checked, _extends2))\n        });\n      }\n\n    case 'RESET_FORM':\n      {\n        var initialData = payload;\n        return _extends({}, state, {\n          values: initialData\n        });\n      }\n\n    case 'SET_SUCCESS':\n      return _extends({}, state, {\n        success: true,\n        error: false,\n        submitting: false,\n        submitted: true\n      });\n\n    case 'SET_ERROR':\n      return _extends({}, state, {\n        success: false,\n        error: true,\n        submitting: false\n      });\n\n    case 'SET_SUBMITTING':\n      return _extends({}, state, {\n        submitting: true\n      });\n\n    case 'SET_HONEYPOT_NAME':\n      return _extends({}, state, {\n        honeypotName: payload\n      });\n\n    case 'ENABLE_RECAPTCHA':\n      return _extends({}, state, {\n        recaptchaEnabled: payload\n      });\n\n    default:\n      throw new Error(\"Action type \\\"\" + type + \"\\\" is not defined.\");\n  }\n}\n\nvar _excluded$2 = [\"children\"];\nvar NetlifyFormComponent = function NetlifyFormComponent(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded$2);\n\n  var context = useNetlifyFormContext();\n  var formRef = context.formRef,\n      formName = context.formName,\n      formAction = context.formAction,\n      honeypotName = context.honeypotName,\n      recaptchaEnabled = context.recaptchaEnabled,\n      handleSubmit = context.handleSubmit,\n      handleReset = context.handleReset;\n  var netlifyProps = {};\n\n  if (honeypotName) {\n    netlifyProps['data-netlify-honeypot'] = honeypotName;\n  }\n\n  if (recaptchaEnabled) {\n    netlifyProps['data-netlify-recaptcha'] = true;\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: formRef,\n    method: \"post\",\n    name: formName,\n    action: formAction,\n    onSubmit: handleSubmit,\n    onReset: handleReset,\n    \"data-netlify\": true\n  }, netlifyProps, props), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"form-name\",\n    value: formName\n  }), children ? isFunction(children) ? children(context) : !isEmptyChildren(children) ? children : null : null);\n};\n\nvar _excluded$3 = [\"children\", \"formProps\"];\nvar useNetlifyForm = function useNetlifyForm(_ref) {\n  var _ref$name = _ref.name,\n      name = _ref$name === void 0 ? 'Form' : _ref$name,\n      _ref$action = _ref.action,\n      action = _ref$action === void 0 ? '' : _ref$action,\n      _ref$honeypotName = _ref.honeypotName,\n      honeypotName = _ref$honeypotName === void 0 ? '' : _ref$honeypotName,\n      _ref$enableRecaptcha = _ref.enableRecaptcha,\n      enableRecaptcha = _ref$enableRecaptcha === void 0 ? false : _ref$enableRecaptcha,\n      _ref$onSuccess = _ref.onSuccess,\n      onSuccess = _ref$onSuccess === void 0 ? function () {} : _ref$onSuccess,\n      _ref$onFailure = _ref.onFailure,\n      onFailure = _ref$onFailure === void 0 ? function () {} : _ref$onFailure;\n  var initialValues = {};\n  var initialState = {\n    success: false,\n    error: false,\n    submitting: false,\n    submitted: false,\n    response: null,\n    values: initialValues,\n    formName: name,\n    formAction: action,\n    honeypotName: honeypotName,\n    recaptchaEnabled: enableRecaptcha,\n    recaptchaInvisible: false\n  };\n\n  var _React$useReducer = React.useReducer(NetlifyFormReducer, initialState),\n      state = _React$useReducer[0],\n      dispatch = _React$useReducer[1];\n\n  var formRef = React.useRef(null);\n  var recaptchaRef = React.useRef(null);\n\n  var handleChange = function handleChange(_ref2) {\n    var _ref2$target = _ref2.target,\n        name = _ref2$target.name,\n        value = _ref2$target.value,\n        files = _ref2$target.files;\n    dispatch({\n      type: 'CHANGE_FORM_DATA',\n      payload: files != null && files.length > 0 ? {\n        name: name,\n        value: files[0]\n      } : {\n        name: name,\n        value: value\n      }\n    });\n  };\n\n  var handleReset = function handleReset() {\n    dispatch({\n      type: 'RESET_FORM',\n      payload: initialValues\n    });\n  };\n\n  var handleSubmit = function handleSubmit(event, values) {\n    if (event === void 0) {\n      event = null;\n    }\n\n    if (values === void 0) {\n      values = {};\n    }\n\n    try {\n      var _temp4 = function _temp4(_result) {\n        if (_exit2) return _result;\n        dispatch({\n          type: 'SET_SUBMITTING'\n        });\n        return Promise.resolve(fetch('/', {\n          method: 'POST',\n          body: encodeFormData(formData)\n        })).then(function (response) {\n          var context = {\n            state: state,\n            formRef: formRef,\n            recaptchaRef: recaptchaRef\n          };\n\n          if (response.status !== 200) {\n            dispatch({\n              type: 'SET_ERROR'\n            });\n            return onFailure(response, context);\n          }\n\n          dispatch({\n            type: 'SET_SUCCESS'\n          });\n          return onSuccess(response, context);\n        });\n      };\n\n      var _exit2 = false;\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      var formData = _extends({\n        'form-name': state.formName\n      }, values, state.values);\n\n      var _temp5 = function () {\n        if (state.recaptchaEnabled) {\n          var _temp6 = function _temp6(recaptchaValue) {\n            formData['g-recaptcha-response'] = recaptchaValue;\n          };\n\n          if (recaptchaRef.current === null) {\n            throw new Error('reCAPTCHA is enabled but reference not found, make sure you render the reCAPTCHA-component somewhere.');\n          }\n\n          var isRecaptchaInvisible = recaptchaRef.current.props.size === 'invisible';\n          return isRecaptchaInvisible ? Promise.resolve(recaptchaRef.current.executeAsync()).then(_temp6) : _temp6(recaptchaRef.current.getValue());\n        }\n      }();\n\n      return Promise.resolve(_temp5 && _temp5.then ? _temp5.then(_temp4) : _temp4(_temp5));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var setHoneypotName = React.useCallback(function (ref) {\n    return dispatch({\n      type: 'SET_HONEYPOT_NAME',\n      payload: ref\n    });\n  }, []);\n  var enableRecaptchaHandler = React.useCallback(function (enable) {\n    return dispatch({\n      type: 'ENABLE_RECAPTCHA',\n      payload: enable\n    });\n  }, []);\n  return _extends({}, state, {\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    handleReset: handleReset,\n    setHoneypotName: setHoneypotName,\n    enableRecaptcha: enableRecaptchaHandler,\n    formRef: formRef,\n    recaptchaRef: recaptchaRef\n  });\n};\nvar NetlifyForm = function NetlifyForm(_ref3) {\n  var children = _ref3.children,\n      formProps = _ref3.formProps,\n      props = _objectWithoutPropertiesLoose(_ref3, _excluded$3);\n\n  var context = useNetlifyForm(props);\n  return /*#__PURE__*/React.createElement(NetlifyFormProvider, context, /*#__PURE__*/React.createElement(NetlifyFormComponent, formProps, children));\n};\n\nvar _excluded$4 = [\"siteKey\", \"invisible\"];\nvar Recaptcha = function Recaptcha(_ref) {\n  var _ref$siteKey = _ref.siteKey,\n      siteKey = _ref$siteKey === void 0 ? '' : _ref$siteKey,\n      _ref$invisible = _ref.invisible,\n      invisible = _ref$invisible === void 0 ? false : _ref$invisible,\n      passThroughProps = _objectWithoutPropertiesLoose(_ref, _excluded$4);\n\n  var _useNetlifyFormContex = useNetlifyFormContext(),\n      recaptchaRef = _useNetlifyFormContex.recaptchaRef;\n\n  return /*#__PURE__*/React.createElement(GoogleRecaptcha, _extends({}, passThroughProps, {\n    sitekey: siteKey,\n    ref: recaptchaRef\n  }, invisible ? {\n    size: 'invisible'\n  } : {}));\n};\n\nexport { Honeypot, NetlifyForm, NetlifyFormComponent, NetlifyFormContext, NetlifyFormProvider, Recaptcha, useNetlifyForm, useNetlifyFormContext };\n//# sourceMappingURL=index.modern.js.map\n","import React from \"react\";\nimport Layout from \"../components/layout\";\nimport { graphql } from \"gatsby\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  useNetlifyForm,\n  NetlifyFormProvider,\n  NetlifyFormComponent,\n  Honeypot,\n} from \"react-netlify-forms\";\nimport styled, { css } from \"styled-components\";\n\nconst ContactTemplate = ({ data }) => {\n  const { html, frontmatter } = data.markdownRemark;\n\n  return (\n    <Layout title={frontmatter.title}>\n      <ContactWrapper>\n        <ContactCopy dangerouslySetInnerHTML={{ __html: html }} />\n        <ContactForm />\n      </ContactWrapper>\n    </Layout>\n  );\n};\n\nexport default ContactTemplate;\n\nconst ContactForm = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const netlify = useNetlifyForm({\n    name: \"Contact\",\n    action: \"/thanks\",\n    honeypotName: \"bot-field\",\n  });\n  const onSubmit = (data) => {\n    netlify.handleSubmit(null, data);\n  };\n\n  return (\n    <FormWrapper>\n      <NetlifyFormProvider {...netlify}>\n        <NetlifyFormComponent onSubmit={handleSubmit(onSubmit)}>\n          <Honeypot />\n\n          <FormGroup>\n            <label htmlFor=\"name\">Name</label>\n            <input\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              {...register(\"name\", { required: \"Name is required\" })}\n            />\n            <div css={{ height: \"1rem\" }}>\n              {errors.name && (\n                <FormErrorMessage>{errors.name.message}</FormErrorMessage>\n              )}\n            </div>\n          </FormGroup>\n\n          <FormGroup>\n            <label htmlFor=\"email\">Email</label>\n            <input\n              id=\"email\"\n              name=\"email\"\n              type=\"text\"\n              {...register(\"email\", {\n                required: \"Email is required.\",\n                pattern: {\n                  message: \"Email is not valid.\",\n                  value: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/,\n                },\n              })}\n            />\n            <div css={{ height: \"1rem\" }}>\n              {errors.email && (\n                <FormErrorMessage>{errors.email.message}</FormErrorMessage>\n              )}\n            </div>\n          </FormGroup>\n\n          <FormGroup>\n            <label htmlFor=\"message\">Your message</label>\n            <textarea\n              id=\"message\"\n              name=\"message\"\n              rows=\"4\"\n              {...register(\"message\", { required: \"Message is required\" })}\n            />\n            <div css={{ height: \"1rem\" }}>\n              {errors.message && (\n                <FormErrorMessage>{errors.message.message}</FormErrorMessage>\n              )}\n            </div>\n          </FormGroup>\n\n          <FormFeedbackWrapper>\n            {netlify.success && (\n              <FormSuccessFeedback>\n                Message sent successfully\n              </FormSuccessFeedback>\n            )}\n            {netlify.error && (\n              <FormErrorFeedback>\n                Something went wrong, please try again.\n              </FormErrorFeedback>\n            )}\n          </FormFeedbackWrapper>\n\n          <FormButton type=\"submit\">Send Message</FormButton>\n        </NetlifyFormComponent>\n      </NetlifyFormProvider>\n    </FormWrapper>\n  );\n};\n\nconst ContactWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 100%;\n  justify-content: space-around;\n  margin-top: 1rem;\n  padding-bottom: 1rem;\n\n  & > * {\n    flex: 1;\n  }\n\n  @media screen and (max-width: 1000px) {\n    & {\n      flex-direction: column;\n      justify-content: flex-start;\n    }\n\n    & > * {\n      margin-top: 2rem;\n      flex: 0;\n      width: 100%;\n    }\n  }\n`;\n\nconst ContactCopy = styled.div`\n  max-width: 45ch;\n\n  & p {\n    font-size: var(--size-400);\n  }\n\n  & a {\n    color: #f43f5e;\n  }\n`;\n\nconst FormWrapper = styled.div`\n  max-width: 45ch;\n  padding: 1rem;\n  padding-top: 0;\n  border-radius: 4px;\n  border: 1px solid rgba(255, 255, 255, 0.7);\n  background-color: rgba(255, 255, 255, 0.5);\n  backdrop-filter: blur(10px);\n\n  body.dark-mode & {\n    background-color: #3b3b3c;\n    border: 1px solid #515151;\n  }\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-family: inherit;\n\n  & label {\n    margin-top: 1rem;\n    text-transform: capitalize;\n    font-size: var(--size-400);\n  }\n\n  & input,\n  textarea {\n    resize: vertical;\n    font-size: var(--size-400);\n    font-family: inherit;\n    padding: 0.25rem 0.5rem;\n    border-radius: 4px;\n    background-color: #fecdd3;\n    border: 1px solid #fda4af;\n  }\n\n  body.dark-mode & input,\n  body.dark-mode & textarea {\n    background-color: #4f4f50;\n    border: 1px solid #89898a;\n  }\n\n  & textarea:focus,\n  input:focus {\n    outline: none;\n    border: 1px solid #665b5c;\n  }\n`;\n\nconst FormErrorMessage = styled.span`\n  color: red;\n  font-size: var(--size-300);\n  opacity: 0.7;\n`;\n\nconst FormFeedbackWrapper = styled.div`\n  margin-top: 1rem;\n  text-transform: uppercase;\n  font-size: var(--size-300);\n`;\n\nconst FormSuccessFeedback = styled.span`\n  color: green;\n`;\n\nconst FormErrorFeedback = styled.span`\n  color: red;\n`;\n\nconst FormButton = styled.button`\n  margin-top: 1rem;\n  padding: 0.45rem;\n  padding-left: 1.25rem;\n  padding-right: 1.5rem;\n  background-color: #f43f5e;\n  color: #fafafa;\n  border: none;\n  text-transform: uppercase;\n  border-radius: 4px;\n`;\n\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","callback","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isFunction","objectHasFunction","data","appendErrors","validateAllFieldCriteria","errors","message","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","currentField","ref","focus","refs","isWatched","isBlurEvent","some","watchName","startsWith","slice","updateFieldArrayRootError","error","fieldArrayErrors","isBoolean","isFileInput","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","inputValue","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","isWeb","window","HTMLElement","document","cloneObject","copy","Set","Blob","FileList","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isPlainObject","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isEmptyArray","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isHTMLElement","owner","ownerDocument","defaultView","isMultipleSelect","live","isConnected","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getRuleValue","rule","source","schemaErrorLookup","_fields","join","foundError","pop","defaultOptions","reValidateMode","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","submitCount","isDirty","isValidating","isSubmitted","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuiltInValidation","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","v","context","getResolverOptions","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getWatch","fieldValues","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","onChange","shouldSkipValidation","deps","isTouched","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","all","shouldFocus","getFieldState","invalid","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","unsetEmptyArray","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","closest","_a","keepSubmitCount","keepIsSubmitted","keepErrors","_reset","resetField","clearErrors","inputName","setError","setFocus","shouldSelect","select","_extends","assign","i","arguments","call","apply","this","_assertThisInitialized","self","ReferenceError","ReCAPTCHA","_React$Component","subClass","superClass","_this","handleExpired","handleErrored","handleChange","handleRecaptchaRef","create","__proto__","_proto","getValue","grecaptcha","_widgetId","getResponse","getWidgetId","execute","_executeRequested","executeAsync","_this2","resolve","reject","executionResolve","executionReject","onExpired","onErrored","token","explicitRender","render","wrapper","createElement","sitekey","theme","tabindex","size","stoken","hl","badge","captcha","appendChild","componentDidMount","componentDidUpdate","componentWillUnmount","delayOfCaptchaIframeRemoving","temporaryNode","body","style","display","firstChild","removeChild","elem","_this$props","childProps","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","displayName","propTypes","defaultProps","SCRIPT_MAP","idCount","callbackName","getScriptURL","recaptchaOptions","useRecaptchaNet","globalName","WrappedComponent","wrappedComponentName","AsyncScriptLoader","_Component","__scriptURL","asyncScriptLoaderGetScriptLoaderID","__scriptLoaderID","setupScriptURL","asyncScriptLoaderHandleLoad","setState","asyncScriptOnLoad","asyncScriptLoaderTriggerOnScriptLoaded","mapEntry","loaded","Error","obsKey","_this3","scriptURL","scriptId","entry","errored","script","attribute","src","setAttribute","id","callObserverFuncAndRemoveObserver","func","observersMap","onload","onerror","removeOnUnmount","allScripts","getElementsByTagName","parentNode","forwardedRef","Component","ForwardedComponent","forwardRef","_excluded","NetlifyFormContext","NetlifyFormProvider","_ref","children","Provider","useNetlifyFormContext","_excluded$1","Honeypot","_ref$label","label","_useNetlifyFormContex","honeypotName","hidden","encodeFormData","formData","FormData","_i","_Object$keys","append","NetlifyFormReducer","payload","_extends2","_type","success","submitting","submitted","recaptchaEnabled","_excluded$2","NetlifyFormComponent","formRef","formName","formAction","handleReset","netlifyProps","onSubmit","onReset","x","isEmptyChildren","useNetlifyForm","_ref$name","_ref$action","_ref$honeypotName","_ref$enableRecaptcha","enableRecaptcha","_ref$onSuccess","onSuccess","_ref$onFailure","onFailure","initialValues","initialState","response","recaptchaInvisible","_React$useReducer","dispatch","recaptchaRef","setHoneypotName","enableRecaptchaHandler","enable","_ref2","_ref2$target","_temp4","_result","_exit2","fetch","then","status","_temp5","_temp6","recaptchaValue","html","frontmatter","markdownRemark","React","Layout","title","ContactWrapper","ContactCopy","dangerouslySetInnerHTML","__html","ContactForm","_formControl","updateFormState","useForm","netlify","FormWrapper","FormGroup","htmlFor","_StyledDiv","FormErrorMessage","_StyledDiv2","email","rows","_StyledDiv3","FormFeedbackWrapper","FormSuccessFeedback","FormErrorFeedback","FormButton","styled","componentId","withConfig","height"],"sourceRoot":""}